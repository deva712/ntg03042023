import java.util.Scanner;
import java.util.Stack;

public class Celeb {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] arr = new int[n][n];
        for(int i=0;i<arr.length;i++){
            for(int j=0;j< arr.length;j++){
                arr[i][j]= sc.nextInt();
            }
        }
        celeb(arr);
    }
    public static void celeb(int[][] arr) {
        Stack<Integer> st = new Stack<>();
        for (int i = 0; i < arr.length; i++) {
            st.push(i);
        }
        while (st.size() >= 2) {
            int i = st.pop();
            int j = st.pop();
            if (arr[i][j] == 1) {
                st.push(j);
            } else {
                st.push(i);
            }
        }
        int pot = st.pop();
        for (int i = 0; i < arr.length; i++) {
            if (pot != i) {
                if(arr[i][pot] == 0 || arr[pot][i] == 1){
                    System.out.println("No celeb");
                    return;
                }
            }
        }
        System.out.println(pot);
    }
}


import java.util.*;
import java.lang.*;
public class TowerOfHanoi{
    class Stack
    {
        int capacity;
        int top;
        int array[];
    }
    Stack initStack(int capacity)
    {
        Stack st = new Stack();
        st.capacity = capacity;
        st.top = -1;
        st.array = new int[capacity];
        return st;
    }
    boolean isFull(Stack st)
    {
        return (st.top == st.capacity - 1);
    }
    boolean isEmpty(Stack st)
    {
        return (st.top == -1);
    }
    void push(Stack st, int item)
    {
        if (isFull(st)) {
            return;
        }

        st.array[++st.top] = item;
    }
    int pop(Stack st)
    {
        if (isEmpty(st))
            return Integer.MIN_VALUE;

        return st.array[st.top--];
    }
    void move(Stack src, Stack dest,
              char s, char d)
    {
        int disk1 = pop(src);
        int disk2 = pop(dest);
        if (disk1 == Integer.MIN_VALUE)
        {
            push(src, disk2);
            printMove(d, s, disk2);
        }
        else if (disk2 == Integer.MIN_VALUE)
        {
            push(dest, disk1);
            printMove(s, d, disk1);
        }
        else if (disk1 > disk2)
        {
            push(src, disk1);
            push(src, disk2);
            printMove(d, s, disk2);
        }
        else
        {
            push(dest, disk2);
            push(dest, disk1);
            printMove(s, d, disk1);
        }
    }
    void printMove(char from, char to, int disk)
    {
        System.out.println("Move the disk " + disk +
                " from " + from +
                " to " + to);
    }
    void iterativeTowerOfHanoi(int n, Stack
            src, Stack aux, Stack dest)
    {
        int i, moves;
        char s = 'S', d = 'D', a = 'A';
        if (n % 2 == 0)
        {
            char temp = d;
            d = a;
            a = temp;
        }
        moves = (int)(Math.pow(
                2, n) - 1);

        for(i = n; i >= 1; i--)
            push(src, i);

        for(i = 1; i <= moves; i++)
        {
            if (i % 3 == 1)
                move(src, dest, s, d);

            else if (i % 3 == 2)
                move(src, aux, s, a);

            else if (i % 3 == 0)
                move(aux, dest, a, d);
        }
    }
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        TowerOfHanoi ob = new TowerOfHanoi();
        Stack source = ob.initStack(n);
        Stack destination = ob.initStack(n);
        Stack auxiliary = ob.initStack(n);
        ob.iterativeTowerOfHanoi(n, source, auxiliary, destination);
    }
}

import java.util.Scanner;
import java.util.Stack;
class StackPermutation {
    static Boolean checkStackPermutation(int ip[], int op[],
                                         int n)
    {
        Stack<Integer> s = new Stack<Integer>();
        int j = 0;
        for (int i = 0; i < n; i++) {
            s.push(ip[i]);
            while (!s.isEmpty() && s.peek() == op[j]) {
                s.pop();
                j++;
            }
        }
        if (s.isEmpty()) {
            return true;
        }
        return false;
    }
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int input[] = new int[n];
        for(int i=0;i<n;i++){
            input[i] = sc.nextInt();
        }
        int output[] = new int[n];
        for(int j=0;j<n;j++) {
            output[j] = sc.nextInt();
        }
        if (checkStackPermutation(input, output, n))
            System.out.println("Yes");
        else
            System.out.println("Not Possible");
    }
}

import java.util.*;
import java.lang.*;
class ActivitySelection {
    public static void printMaxActivities(int s[], int f[], int n)
    {
        int i, j;
        System.out.print("Following activities are selected : n ");
        i = 0;
        System.out.print(i + " ");

        // Consider rest of the activities
        for (j = 1; j < n; j++) {
            if (s[j] >= f[i]) {
                System.out.print(j + " ");
                i = j;
            }
        }
    }
    public static void main(String[] args)
    {
        int s[] = { 1, 3, 0, 5, 8, 5 };
        int f[] = { 2, 4, 6, 7, 9, 9 };
        Arrays.sort(s);
        Arrays.sort(f);
        int n = s.length;
        printMaxActivities(s, f, n);
    }
}

import java.util.LinkedList;
import java.util.Scanner;
class Queue
{
    public static int minIndex(java.util.Queue<Integer> list,
                               int sortIndex)
    {
        int min_index = -1;
        int min_value = Integer.MAX_VALUE;
        int s = list.size();
        for (int i = 0; i < s; i++)
        {
            int current = list.peek();
            list.poll();
            if (current <= min_value && i <= sortIndex)
            {
                min_index = i;
                min_value = current;
            }
            list.add(current);
        }
        return min_index;
    }
    public static void insertMinToRear(java.util.Queue<Integer> list,
                                       int min_index)
    {
        int min_value = 0;
        int s = list.size();
        for (int i = 0; i < s; i++)
        {
            int current = list.peek();
            list.poll();
            if (i != min_index)
                list.add(current);
            else
                min_value = current;
        }
        list.add(min_value);
    }

    public static void sortQueue(java.util.Queue<Integer> list)
    {
        for(int i = 1; i <= list.size(); i++)
        {
            int min_index = minIndex(list,list.size() - i);
            insertMinToRear(list, min_index);
        }
    }
    public static void main (String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        java.util.Queue<Integer> list = new LinkedList<Integer>();
        for(int i=0;i<n;i++){
            list.add(sc.nextInt());
        }
        sortQueue(list);
        while(list.isEmpty()== false)
        {
            System.out.print(list.peek() + " ");
            list.poll();
        }
    }
}

import java.util.Scanner;
public class Stock {
    public static void stock(int n,int[] price,int [] ans){
        ans[0] = 1;
        for(int i=1;i<n;i++){
            int counter = 1;
            while((i - counter) >=0 && price[i] >= price[i-counter]){
                counter += ans[i-counter];
            }
            ans[i] = counter;
        }
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] price = new int[n];
        for(int i=0;i<n;i++){
            price[i] = sc.nextInt();
        }
        int[] ans = new int[n];
        stock(n,price,ans);
        for(int an :ans){
            System.out.print(an+" ");
        }
    }
}

